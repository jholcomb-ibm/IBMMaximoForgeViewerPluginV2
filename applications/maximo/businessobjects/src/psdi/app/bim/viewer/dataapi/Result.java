/*
 *
 * IBM Confidential
 *
 * OCO Source Materials
 *
 * 5724-U18
 *
 * (C) COPYRIGHT IBM CORP. 2006,2016
 *
 * The source code for this program is not published or otherwise
 * divested of its trade secrets, irrespective of what has been
 * deposited with the U.S. Copyright Office.
 *
 */
package psdi.app.bim.viewer.dataapi;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.util.Iterator;

import com.ibm.json.java.JSON;
import com.ibm.json.java.JSONArray;
import com.ibm.json.java.JSONArtifact;
import com.ibm.json.java.JSONObject;


/**
 * @author Doug
 *
 * 
 * 504: {
 * 		"fault":{
 *       	"faultstring":"Gateway timeout","detail":{
 *       		"code":"GATEWAY_TIMEOUT"
 *      	}
 *       }
 *   }
 *
 */
public class Result
{

    public enum ERROR_TYPE
    {
        NONE,
        HTTP,		// HTTP Return code > 299
        REST,		// Generated by Autodesk REST services
        API,		// Generated from this package
        EXCEPTION 	// Generated from this package
    }
    
    public static final int API_ERR_BAD_CHECKSUM   = -1;
    public static final int API_ERR_NO_OBJECT      = -2;
    public static final int API_ERR_FILE_NOT_FOUND = -3;
    public static final int API_ERR_SCOPE_REJECTED = -4;

    protected ERROR_TYPE _errorType        = ERROR_TYPE.NONE;
    private int          _httpStatus       = -1;
    private int          _apiErrorCode     = 0;
    private String       _errorCode        = "";
    private String       _errorMessage     = "";
    private String       _moreInfo         = "";
    private String       _result           = "";
    private Exception    _except           = null;
    
    protected String     _rawError;
    protected String     _rawData;
    
    private static final String KEY_DETAIL         = "detail";
	private static final String KEY_DEV_MSG        = "developerMessage";
	private static final String KEY_DEV_DIAGNOSTIC = "diagnostic";
	private static final String KEY_ERROR_CODE     = "errorcode";
	private static final String KEY_FAULT          = "fault";
	private static final String KEY_FAULT_STRING   = "faultstring";
	private static final String KEY_MORE_INFO      = "more info";
	private static final String KEY_REASON         = "reason";
	private static final String KEY_RESULT         = "Result";
	private static final String KEY_USER_MSG       = "userMessage";
    
	private static final String KEY_ERROR_MSG      = "Error Message";
	
    Result()
    {}
    
    Result(
        Result result
    ) {
        _errorType    = result._errorType;
        _apiErrorCode = result._apiErrorCode;
        _httpStatus   = result._httpStatus;
        _errorCode    = result._errorCode;
        _errorMessage = result._errorMessage;
        _moreInfo     = result._moreInfo;
        _rawError     = result._rawError;
        _rawData      = result._rawData;
        _except       = result._except;
    }
    
    Result(
        HttpURLConnection connection
    ) {
    	try
    	{
            _httpStatus = connection.getResponseCode();
            if( _httpStatus > 299 )
            {
                _errorType        = ERROR_TYPE.HTTP;
                _rawError = stream2string( connection.getErrorStream() );
                parseError( _rawError );
            	return;
            }
            _rawData = stream2string( connection.getInputStream() );
            parseReturn( _rawData );
    	}
    	catch( IOException ioe )
    	{
    		parseException( ioe );
    	}
    }
    
	Result(
	    Exception e 
    ) {
		parseException( e );
	}
    
    public boolean isError()
    {
        return ( _errorType != ERROR_TYPE.NONE );
    }

    public int getAPIErrorCode()
    {
        return _apiErrorCode;
    }

    public String getErrorCode()
    {
        return _errorCode;
    }
    
    public String getErrorMessage()
    {
    	if( _errorMessage != null && _errorMessage.length() > 0 )
    	{
    		return _errorMessage;
    	}
    	if( _rawError != null && _rawError.length() > 0 )
    	{
    		return _rawError;
    	}
    	return "";
    }

    public String getRawData()
    {
        return _rawData;
    }
    
    public String getRawError()
    {
        return _rawError;
    }
    
    public ERROR_TYPE getErrorType()
    {
        return _errorType;
    }

    public int getHttpStatus()
    {
        return _httpStatus;
    }

    public void setHttpStatus(
        int httpStatus 
    ) {
        _httpStatus = httpStatus;
    }
    
    public void setError(
    	int errorCode        
	) {
    	_apiErrorCode = errorCode;
    	_errorType    = ERROR_TYPE.API;
    }
    
    protected void setErrorCode(
    	String message
	) {
    	_errorCode = message;
    }
    
    protected void setErrorMessage(
    	String message
	) {
    	_errorMessage = message;
    }
    
    protected void setDetailMessage(
    	String message
	) {
    	_moreInfo = message;
    }
    
    protected JSONArtifact parseError(
    	String data
	) 
		throws IOException 
	{
    	JSONArtifact jArtifact =  Result.string2JSON( data ); 
    	
    	if( jArtifact != null && jArtifact instanceof JSONObject )
    	{
        	JSONObject jObj;
    		jObj = (JSONObject)jArtifact;
        	Object value = jObj.get( KEY_REASON );
            if( value != null )
            {
                if( value instanceof String )
                {
                	_errorMessage = (String)value;
                }
            }

            value = jObj.get( KEY_ERROR_CODE );
            if (value != null)
            {
                if( value instanceof String )
                {
                	_errorCode = (String)value;
                }
            }
            
            value = jObj.get( KEY_DEV_DIAGNOSTIC );
            if (value != null)
            {
                if( value instanceof String )
                {
                    if( _errorMessage.length() != 0 )
                    {
                    	_errorMessage += "\n";
                    }
                	_errorMessage += (String)value;
                }
            }
            
            value = jObj.get( KEY_ERROR_MSG );
            if (value != null)
            {
                if( value instanceof String )
                {
                    if( _errorMessage.length() != 0 )
                    {
                    	_errorMessage += "\n";
                    }
                	_errorMessage += (String)value;
                }
            }
            
            value = jObj.get( KEY_USER_MSG );
            if (value != null)
            {
                if( value instanceof String )
                {
                    if( _errorMessage.length() != 0 )
                    {
                    	_errorMessage += "\n";
                    }
                	_errorMessage += (String)value;
                }
            }
            
            value = jObj.get( KEY_DEV_MSG );
            if (value != null)
            {
                if( value instanceof String )
                {
                    if( _errorMessage.length() != 0 )
                    {
                    	_errorMessage += "\n";
                    }
                	_errorMessage += (String)value;
                }
            }
            
            value = jObj.get( KEY_MORE_INFO );
            if (value != null)
            {
                if( value instanceof String )
                {
                	_moreInfo = (String)value;
                }
            }

            /*
             * {
             * 		"fault":{"
             *           faultstring":"Invalid ApiKey for given resource",
             *           "detail":{"errorcode":"oauth.v2.InvalidApiKeyForGivenResource"}
             *      }
             * }
             */

            value = jObj.get( KEY_FAULT );
            if (value != null)
            {
                if( value instanceof JSONObject )
                {
                	jObj = (JSONObject)value;
                	value = jObj.get( KEY_FAULT_STRING );
                    if( value != null )
                    {
                        if( value instanceof String )
                        {
                        	_errorMessage = (String)value;
                        }
                    }
                	value = jObj.get( KEY_DETAIL );
                    if( value != null )
                    {
                        if( value instanceof JSONObject )
                        {
                        	jObj = (JSONObject)value;
                        	value = jObj.get( KEY_ERROR_CODE );
                            if( value != null )
                            {
                                if( value instanceof String )
                                {
                                	_moreInfo = (String)value;
                                }
                            }
                        }
                    }
                }
            }
            
    	}
    	
        return jArtifact;
    }

    protected void parseException(
    	Exception e
	) {
		String msg = e.getLocalizedMessage();
		if( msg == null || msg.length() == 0 )
		{
			msg = e.getMessage();
		}
		if( msg == null || msg.length() == 0 )
		{
			msg = e.getClass().getSimpleName();
		}
		_errorMessage = msg;
		_errorType = ERROR_TYPE.EXCEPTION;
		_errorCode = e.getClass().getSimpleName();
		_except    = e;
    }
    
    /**
     * {"Result":"Success"}
     * @throws IOException 
     */
    protected JSONArtifact parseReturn(
    	String data
	) 
		throws IOException 
	{
    	if( data == null || data.length() == 0 ) return null;
    	
    	JSONArtifact jArtifact = JSON.parse(  data );
    	JSONObject jObj;
    	if( jArtifact instanceof JSONObject )
    	{
    		jObj = (JSONObject)jArtifact;
            Object value = jObj.get( KEY_RESULT );
            if (value != null)
            {
                if( value instanceof String )
                {
                	_result = (String)value;
                }
            }
    	}

        return jArtifact;
    }

    @Override
    public String toString()
    {
        StringBuffer buf = new StringBuffer();
        if( _errorType != ERROR_TYPE.NONE )
        {
            if( _httpStatus > 299 )
            {
                buf.append( _httpStatus ).append(  ": " );
            }
            if( _errorCode != null && _errorCode.length() > 0)
            {
                buf.append( KEY_ERROR_CODE).append( ": " ).append( _errorCode ).append(  '\n' );
            }
            if( _errorMessage != null && _errorMessage.length() > 0)
            {
                buf.append( KEY_ERROR_MSG ).append( ": " ).append( _errorMessage ).append(  '\n' );
            }
            if( _moreInfo != null && _moreInfo.length() > 0)
            {
                buf.append( KEY_MORE_INFO).append( ": " ).append( _moreInfo ).append(  '\n' );
            }
			if( _errorMessage.length() == 0 )
			{
				if( _rawError != null && _rawError.length() > 0 )
				{
					buf.append( _rawError ).append( '\n' );
				}
			}
            return buf.toString();
        }
        if( _result.length() > 0 )
        {
            buf.append( KEY_RESULT).append( ": " ).append( _result ).append(  '\n' );
            return buf.toString();
        }
        return _rawData;
    }
     
     protected String stream2string(
    	 InputStream is
	 ) 
		 throws IOException 
	 {
         if (is == null)
         {
             return "";
         }
             
         try
         {
             BufferedReader br = new BufferedReader( new InputStreamReader( is ) );
             String output;
             StringBuffer buf = new StringBuffer();
                 
             while( (output = br.readLine()) != null )
             {
                 buf.append( output );
             }
             return buf.toString();
         }
         finally
         {
        	 is.close();
         }
     }
     
 	public static void printJson(
		JSONArtifact jArtifact
	) {
 		printJson( jArtifact, 0 );
 	}
 	
	public static void printJson(
		JSONArtifact jArtifact,
		int          level    
	) {
    	JSONObject jObj;
    	if( jArtifact instanceof JSONObject )
    	{
    		printLineStart( level );
			System.out.print( '{' );
    		jObj = (JSONObject)jArtifact;
    		@SuppressWarnings( "unchecked" )
            Iterator<String> itr = jObj.keySet().iterator();
    		while( itr.hasNext() )
    		{
    			String key = itr.next();
    			Object value = jObj.get(  key );
    			if( value instanceof JSONArtifact )
    			{
    				printJson( (JSONArtifact)value, level + 1 );
    			}
    			else
				{
    	    		printLineStart( level );
    				System.out.print( key + " : " + value );
				}
    		}
    		printLineStart( level );
			System.out.print( '}' );
    	}
    	if( jArtifact instanceof JSONArray )
    	{
    		printLineStart( level );
			System.out.print( '[' );
    		JSONArray jArray = (JSONArray)jArtifact;
    		@SuppressWarnings( "rawtypes" )
            Iterator itr = jArray.iterator();
    		while( itr.hasNext() )
    		{
    			Object value = itr.next();
				printJson( (JSONArtifact)value, level + 1 );
    		}
    		printLineStart( level );
			System.out.print( ']' );
    	}
   	}
	
	public static void printLineStart(
	    int level 
    ) {
		System.out.println();
		for( int i = 0; i < level; i++ )
		{
			System.out.print( '\t' );
		}
	}
	
	public static JSONArtifact string2JSON(
		String data
    ) {
		if( data == null || data.length() == 0 )
		{
			return null;
		}
		
    	JSONArtifact jArtifact;
    	try
    	{
        	jArtifact = JSON.parse(  data );
    	}
    	catch( Throwable t )
    	{
    		return null;	// Not JSON
    	}
		return jArtifact;
	}
}